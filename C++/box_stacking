    public:
    int mm[303] = {0};
    
    struct Box{
        int height, length, width;
    };
    
    int maxH( struct Box boxes[], int base, int fix){
        if(base == -1)return 0;
        
        if(!mm[base]){
            
                int mx = 0;
                for(int i=0;i<=base;i++){
                    if(fix==-1 || boxes[i].length < boxes[fix].length && boxes[i].width < boxes[fix].width)
                        mx = max(mx, maxH(boxes, i-1, i) + boxes[i].height);
                }
                return mm[base] = mx;
            
        }
        else{
            return mm[base];
        }
    }
    int maxHeight(int height[],int width[],int length[],int n)
    {
        Box boxes[3*n];
        int index = 0;
        
        for(int i=0;i<n;i++){
            boxes[index].height = height[i];
            boxes[index].length = max(length[i], width[i]);
            boxes[index].width = min(length[i], width[i]);
            index++;
            
            boxes[index].height = length[i];
            boxes[index].length = max(height[i], width[i]);
            boxes[index].width = min(height[i], width[i]);
            index++;
            
            boxes[index].height = width[i];
            boxes[index].length = max(length[i], height[i]);
            boxes[index].width = min(length[i], height[i]);
            index++;
        }
        
        sort(boxes, boxes + 3*n, [](Box b1, Box b2) {
       
        return (b1.length * b1.width)
               < (b2.length * b2.width);
    });
        
        return maxH(boxes, 3*n-1, -1);
    }
};
   
